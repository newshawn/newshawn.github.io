<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>0308 寻找文件夹中的最大和最小文件</title>
    <link href="/2022/11/16/0308%20%E5%AF%BB%E6%89%BE%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C%E6%9C%80%E5%B0%8F%E6%96%87%E4%BB%B6/"/>
    <url>/2022/11/16/0308%20%E5%AF%BB%E6%89%BE%E6%96%87%E4%BB%B6%E5%A4%B9%E4%B8%AD%E7%9A%84%E6%9C%80%E5%A4%A7%E5%92%8C%E6%9C%80%E5%B0%8F%E6%96%87%E4%BB%B6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO流;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.util.Date;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shawnwen</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 创建时间：2022-3-8 16:21:40</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> 遍历文件夹1</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> class 遍历文件夹<span class="hljs-number">1</span> &#123;<br><br>publi**c <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:/Windows&quot;</span>);<br>System.out.println(<span class="hljs-string">&quot;当前文件是&quot;</span>+f);<br><br><span class="hljs-comment">// 为什么这个位置打不开，下面却可以列出文件夹下的所有文件形成数组</span><br><span class="hljs-comment">// 似乎是拒绝访问，应该访问权限没打开，难道下面那个不需要访问权限吗</span><br><span class="hljs-keyword">try</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;试图打开 C:/windows&quot;</span>);<br><span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(f);<br>System.out.println(<span class="hljs-string">&quot;成功打开&quot;</span>);<br>&#125;<br><span class="hljs-keyword">catch</span>(FileNotFoundException e) &#123;<br>System.out.println(<span class="hljs-string">&quot;C:/windows不存在&quot;</span>);<br>e.printStackTrace();<br>&#125;<br><br><span class="hljs-comment">// 构建文件数组，文件夹也会被算入其中</span><br>File[]fs = f.listFiles();<br><span class="hljs-keyword">if</span>(fs==<span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(File file : fs) &#123;<br>System.out.println(file);<br>&#125;<br><br><span class="hljs-comment">// 最大最小字节</span><br><span class="hljs-type">long</span> <span class="hljs-variable">maxSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-type">long</span> <span class="hljs-variable">minSize</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br><br><span class="hljs-comment">// 最大最小文件夹</span><br><span class="hljs-type">File</span> <span class="hljs-variable">maxFile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">File</span> <span class="hljs-variable">minFile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">// 遍历文件夹数组</span><br><span class="hljs-keyword">for</span>(File file : fs) &#123;<br><br><span class="hljs-comment">//如果是文件夹就排除</span><br><span class="hljs-keyword">if</span>(file.isDirectory()|file.length()==<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">continue</span>;<br>&#125;<br><br><span class="hljs-comment">//寻找最大字节文件</span><br><span class="hljs-keyword">if</span>(file.length()&gt;maxSize) &#123;<br>maxSize = file.length();<br>maxFile = file;<br>&#125;<br><br><span class="hljs-comment">// 寻找最小字节文件</span><br><span class="hljs-keyword">if</span>(file.length()&lt;minSize) &#123;<br>minSize = file.length();<br>minFile = file;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//输出</span><br>System.out.println(<span class="hljs-string">&quot;最大的文件是&quot;</span>+maxFile+<span class="hljs-string">&quot;,其大小是&quot;</span>+maxSize+<span class="hljs-string">&quot;\n&quot;</span>+<span class="hljs-string">&quot;最小的文件是&quot;</span>+minFile+<span class="hljs-string">&quot;,其大小是&quot;</span>+minSize);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO流;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shawnwen</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 创建时间：2022-3-8 21:06:24</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> 遍历文件夹2</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span></span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> class 遍历文件夹<span class="hljs-number">2</span> &#123;<br><br><span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">minSize</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br><span class="hljs-keyword">static</span> <span class="hljs-type">long</span> <span class="hljs-variable">maxSize</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">static</span> <span class="hljs-type">File</span> <span class="hljs-variable">maxfile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-keyword">static</span> <span class="hljs-type">File</span> <span class="hljs-variable">minfile</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment"> * 这里就要使用函数了，因为这个要细查每一个文件，当你查到文件夹</span><br><span class="hljs-comment"> * 时就要深入进去，就层层嵌套，跟递归一样，然后查到最后，而且可以</span><br><span class="hljs-comment"> * 让最初的位置直接调用函数，文件夹就直接调用文件夹，也更简洁</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">listFiles</span><span class="hljs-params">(File file)</span> &#123;<br><span class="hljs-comment">// 先验文件</span><br><span class="hljs-keyword">if</span>(file.isFile()||file.length()!=<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">if</span>(file.length()&gt;maxSize) &#123;<br>maxSize = file.length();<br>maxfile = file;<br>&#125;<br><span class="hljs-keyword">if</span>(file.length()&lt;minSize) &#123;<br>minSize = file.length();<br>minfile = file;<br>&#125;<br>&#125;<br><span class="hljs-comment">// 验文件夹，并判断是不是空的</span><br><span class="hljs-keyword">if</span>(file.isDirectory()||file.length()!=<span class="hljs-number">0</span>) &#123;<br>File[] fs = file.listFiles();<br><span class="hljs-keyword">if</span>(fs!=<span class="hljs-literal">null</span>) &#123;<br><span class="hljs-keyword">for</span>(File f : fs) &#123;<br>listFiles(f);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><br><span class="hljs-type">File</span> <span class="hljs-variable">f</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;C:/windows&quot;</span>);<br><br>listFiles (f);<br>System.out.println(<span class="hljs-string">&quot;最大的文件是&quot;</span>+maxfile+<span class="hljs-string">&quot;,其大小是&quot;</span>+maxSize+<span class="hljs-string">&quot;字节&quot;</span>);<br>        System.out.println(<span class="hljs-string">&quot;最小的文件是&quot;</span>+minfile+<span class="hljs-string">&quot;,其大小是&quot;</span>+minSize+<span class="hljs-string">&quot;字节&quot;</span>);<br><br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>java/io</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>postname</title>
    <link href="/2022/11/15/postname/"/>
    <url>/2022/11/15/postname/</url>
    
    <content type="html"><![CDATA[]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/11/15/hello-world/"/>
    <url>/2022/11/15/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Github 搭建博客</title>
    <link href="/2022/11/15/Github%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2022/11/15/Github%20%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<p>在 2022 年 11 月 15 日，本人正式开始使用 github 静态页面打造个人博客，期间也遇到了很多错误。</p><p><a href="https://blog.nicely.fun/post/Hexo-Aurora-Cos-CDN">某些教程</a><br><a href="https://hexo.io/zh-cn/docs/">hexo 官方文档</a><br><a href="https://github.com/fluid-dev/hexo-theme-fluid">fluid 主题</a></p><p>每次无论 <code>hexo g</code> （生产文件）或 <code> hexo s</code>（生成本地界面），都最好先用 <code>hexo clean</code> 清理本地缓存</p><h3 id="生成本地博客内容"><a href="#生成本地博客内容" class="headerlink" title="生成本地博客内容"></a>生成本地博客内容</h3><p><code>npm install -g hexo </code> 安装 hexo， -g 表示全局安装， hexo-cli 为所安装的包。然后先用 <code>hexo init</code> 初始化 hexo（受网络影响很大，可能要很多次才成功），然后文件夹中就会多了很多文件。然后 <code>hexo s</code> 来生产静态的本地 hexo 页面。<br><img src="https://images-1310726222.cos.ap-chengdu.myqcloud.com/obsidian-images20221115214650.png"></p><p>都到这一步了，结果本地端口无法访问</p><p><img src="https://images-1310726222.cos.ap-chengdu.myqcloud.com/obsidian-images20221115214714.png"><br>重启后终于进来了，有可能端口被占用了，好像并不是被占用，注意看最后几个字 <code>Press Ctrl+C to stop</code>，<code>hexo s</code> 命令相当于开启一个服务器，然后 <code>Ctrl+C</code> 就会停止服务，就i会出现上面的无法访问，然后你要是用键盘复制的话，可能还没输入到浏览器打开，复制的一瞬间，服务器就被你关闭了。所以不要 <code>Ctrl + C</code> 复制，如果关闭了，还以用 <code>hexo s</code> 再次打开。而且关闭服务器需要在 git 界面按 Ctrl+C，如果不在 git 页面就不行。按了之后就会弹出一个 Farewell。</p><p><img src="https://images-1310726222.cos.ap-chengdu.myqcloud.com/obsidian-images20221115220052.png" alt="|700"></p><p><img src="https://images-1310726222.cos.ap-chengdu.myqcloud.com/obsidian-images20221115215519.png"></p><h3 id="发布博客到互联网"><a href="#发布博客到互联网" class="headerlink" title="发布博客到互联网"></a>发布博客到互联网</h3><p>修改 <code>_config.yml</code> 文件，将最下面的 deploy 开始修改为如图所示，type 为 git，repository 为同名仓库的链接，branch 为 main，注意，之前是用 master，很多教程还是用 master，坑了不少人。然后用英文的冒号，冒号之后打一个空格。</p><p><img src="https://images-1310726222.cos.ap-chengdu.myqcloud.com/obsidian-images20221115220757.png" alt="|700"></p><p>然后下载<code>hexo-deploy-git</code> 插件<code>hexo-deployer-git --save</code>，结果又开始疯狂报错，网上查阅后，可以：</p><ol><li>清空代理。<code>npm config set proxy null</code></li><li>清空缓存。<code>npm cache clean --force</code></li><li>重新设置镜像源或者使用国内淘宝镜像。<code>npm config set registry http://registry.npmjs.org/</code> ，<code>npm config set registry https://registry.npm.taobao.org</code><br><img src="https://images-1310726222.cos.ap-chengdu.myqcloud.com/obsidian-images20221115222018.png"></li></ol><p>接着 hexo -g，是生成页面的命令，g 是 generate，可以看出生成的都是 html、css、js 等文件，用来展现的文件。生成的是 public 文件夹<br><img src="https://images-1310726222.cos.ap-chengdu.myqcloud.com/obsidian-images20221115222259.png"></p><p>然后 hexo -d 部署命令，d 是 deploy 的意思。好像教程错了，之前 <code>_config.yml</code> 文件的修改不对，应该是下面这样：第二行改为 repo，然后格式为 <code>git@github.com:yourname/yourname.github.io.git # yourname，自己Github用户名</code>，然后 branch 感觉还是 main 好了。</p><p><img src="https://images-1310726222.cos.ap-chengdu.myqcloud.com/obsidian-images20221115223638.png"></p><p><img src="https://images-1310726222.cos.ap-chengdu.myqcloud.com/obsidian-images20221115223531.png"></p><p>然后修改了直接 hexo -d，就成功了</p><p><img src="https://images-1310726222.cos.ap-chengdu.myqcloud.com/obsidian-images20221115223700.png"></p><p>github 也上传上去了，然后在 gitpage 里选择一下就行了</p><p><img src="https://images-1310726222.cos.ap-chengdu.myqcloud.com/obsidian-images20221115224625.png"></p><h3 id="更换主题"><a href="#更换主题" class="headerlink" title="更换主题"></a>更换主题</h3><p>从 github 上用 git 拉取主题的时候报错 <code># Failed to connect to 127.0.0.1 port XXXXX Connection refused</code></p><p><img src="https://images-1310726222.cos.ap-chengdu.myqcloud.com/obsidian-images20221115232945.png"></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>0309 拆分文件夹和合并</title>
    <link href="/2022/03/09/0309%20%E6%8B%86%E5%88%86%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E5%90%88%E5%B9%B6/"/>
    <url>/2022/03/09/0309%20%E6%8B%86%E5%88%86%E6%96%87%E4%BB%B6%E5%A4%B9%E5%92%8C%E5%90%88%E5%B9%B6/</url>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> IO流;<br><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@author</span> shawnwen</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@version</span> 创建时间：2022-3-9 20:28:55</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@ClassName</span> 文件拆分正确答案</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@Description</span> 大体流程是这样的，先用一个大数组把文件的内容read过去，然后</span><br><span class="hljs-comment"> * 算出需要拆分的文件个数，在用循环的方法，对每一个小文件，按照命名，分配数</span><br><span class="hljs-comment"> * 组，创建文件的步骤，然后把大数组中的内容部分复制到小数组中，最后write到</span><br><span class="hljs-comment"> * 新创建的文件中，创建文件的时候可以用(目录,名字)</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 合并就是先用for循环try catch，读取小文件到小数组中去，每一次循环都把小数组</span><br><span class="hljs-comment"> * 整合到大数组中去，然后循环外一个try catch，把大数组write到新建的文件中</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 这个过程中用了两个类方法，一个是拆分一个是合并，并且存在许多不足：</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 1. 首先fileNumber是表示文件个数的，但是在两个方法中出现了同样的代码，是不是可以</span><br><span class="hljs-comment"> * 简化一下，最开始把它当作属性，不管是普通属性还是类属性，都不能直接用，还要再研究</span><br><span class="hljs-comment"> * </span><br><span class="hljs-comment"> * 2.  有没有某种方法，可以按名字找出文件夹中的方法，然后设置找到一个加一个，针织可以</span><br><span class="hljs-comment"> * 在这个过程中直接读到小数组中去</span><br><span class="hljs-comment"> *  </span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">public</span> class 文件拆分与合并正确答案 &#123;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br> <br><br><span class="hljs-type">File</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:/测试文件.txt&quot;</span>);<br><span class="hljs-comment">//splitFiles(f1,2);</span><br>merge(f1,<span class="hljs-number">2</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">splitFiles</span><span class="hljs-params">(File srcFile, <span class="hljs-type">int</span> eachSize)</span> &#123;<br><br><span class="hljs-comment">//创建数组放文件的所有内容</span><br><span class="hljs-comment">//这个length是long类型，需要转int</span><br><span class="hljs-type">byte</span>[] all = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[(<span class="hljs-type">int</span>)(srcFile.length())];<br><br><span class="hljs-comment">// 先把所有内容读取到数组中</span><br><span class="hljs-keyword">try</span> &#123;<br><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(srcFile);<br>fis.read(all);<br>fis.close();<br>&#125;<br><span class="hljs-keyword">catch</span>(IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br><span class="hljs-comment">// 算出拆分后的文件夹个数</span><br><span class="hljs-type">long</span> fileNumber ;<br><span class="hljs-keyword">if</span>(srcFile.length()%eachSize==<span class="hljs-number">0</span>) &#123;<br>fileNumber = srcFile.length()/eachSize;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>fileNumber = srcFile.length()/eachSize+<span class="hljs-number">1</span>;<br>&#125;<br><br><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;fileNumber;i++) &#123;<br><span class="hljs-comment">// 小数组和命名</span><br><span class="hljs-type">byte</span>[] each = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span> [eachSize];<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> srcFile.getName()+<span class="hljs-string">&quot;-&quot;</span>+i;<br><br><span class="hljs-comment">// 在本目录下创建文件</span><br><span class="hljs-type">File</span> <span class="hljs-variable">newFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(srcFile.getParent(), name);<br><br><span class="hljs-comment">// 讨论是不是最后一个</span><br><span class="hljs-keyword">if</span>(i!=fileNumber-<span class="hljs-number">1</span>) &#123;<br>each = Arrays.copyOfRange(all, i*eachSize, (i+<span class="hljs-number">1</span>)*eachSize);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>each = Arrays.copyOfRange(all, i*eachSize, all.length);<br>&#125;<br><br><span class="hljs-comment">// 将小数组的内容写入到小文件中</span><br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(newFile);<br>fos.write(each);<br>fos.close();<br><span class="hljs-comment">//此处得用printf不能用println</span><br>System.out.printf(<span class="hljs-string">&quot;输出子文件%s，其大小是%d字节%n&quot;</span>,newFile.getName(),newFile.length());<br>&#125;<br><span class="hljs-keyword">catch</span>(IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">merge</span><span class="hljs-params">(File srcFile,<span class="hljs-type">int</span> eachSize)</span> &#123;<br><br><span class="hljs-comment">// 前面这个是目录，用的应该是字符串，后面是文件名</span><br>File fmax= <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:/&quot;</span>,<span class="hljs-string">&quot;合并后的文件夹.txt&quot;</span>);<br><br><span class="hljs-comment">// 存放小文件和大文件的小数组</span><br><span class="hljs-type">byte</span>[] small = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span> [eachSize];<br><span class="hljs-type">byte</span>[] max = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span> [(<span class="hljs-type">int</span>)srcFile.length()];<br><br><span class="hljs-comment">//文件数</span><br><span class="hljs-type">long</span> fileNumber ;<br><span class="hljs-keyword">if</span>(srcFile.length()%eachSize==<span class="hljs-number">0</span>) &#123;<br>fileNumber = srcFile.length()/eachSize;<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br>fileNumber = srcFile.length()/eachSize+<span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 循环</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">0</span>; i&lt;fileNumber; i++)&#123;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">File</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;d:/测试文件.txt-&quot;</span>+i);<br><span class="hljs-comment">// 差点忘了，要先弄出一个File对象，刚刚还在想是用文件名还是地址，不知道行不行</span><br><span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(f1);<br><span class="hljs-comment">// 读到这个数组里面，不要急着送过去，判断是不是最后一个，最后一个可能用不满</span><br>fis.read(small);<br><br><span class="hljs-comment">// 不为最后一个的文件</span><br><span class="hljs-keyword">if</span>(i!=fileNumber-<span class="hljs-number">1</span>) &#123;<br><span class="hljs-comment">//FileOutputStream fos = new FileOutputStream(fmax);</span><br><span class="hljs-comment">//不清楚如果每一个都依次写进去会怎么样，这里先用数组存起来</span><br><span class="hljs-comment">//fos.write()</span><br><span class="hljs-comment">// 原数组，原数组起始位置，目标数组，目标数组起始位置，复制的长度</span><br>System.arraycopy(small, <span class="hljs-number">0</span> , max, i*eachSize, eachSize);<br>&#125;<br><span class="hljs-keyword">else</span> &#123;<br><span class="hljs-comment">//这时所需复制的数组长度，此时i为3，说明前面已经有3组了，只用</span><br><span class="hljs-comment">//减去i倍的eachSize就可以了</span><br><span class="hljs-type">int</span> <span class="hljs-variable">last</span> <span class="hljs-operator">=</span> max.length-i*eachSize;<br>System.arraycopy(small, <span class="hljs-number">0</span>, max, i*eachSize, last);<br>&#125;<br>fis.close();<br><span class="hljs-comment">//FileOutputStream fos = new FileOutputStream(fmax);</span><br><span class="hljs-comment">//fos.write(max);</span><br><span class="hljs-comment">//fis.close();</span><br><span class="hljs-comment">//fos.close();</span><br><span class="hljs-comment">//System.out.println(&quot;合成成功&quot;+&quot;文件大小&quot;);</span><br>&#125;<br><span class="hljs-keyword">catch</span>(IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br><span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(fmax);<br>fos.write(max);<br>fos.close();<br>System.out.println(<span class="hljs-string">&quot;合成成功&quot;</span>+<span class="hljs-string">&quot;文件大小为&quot;</span>+fmax.length());<br>&#125;<br><span class="hljs-keyword">catch</span>(IOException e) &#123;<br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>IO</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
